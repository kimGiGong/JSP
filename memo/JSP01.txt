[JSP01]

1. 셋팅
	1) 준비물 : JDK11(8이상),  톰캣 9(8이상), 이클립스, DBMS, 구글 크롬 
		- JDK 환경변수 설정

	2) 톰캣 다운 / 설치
		tomcat.apache.org/
		Download > Tomcat 9 > Core : zip 다운받기

		[ 설치 ]
		작업하는 본인 폴더에 압축파일 옮기고 
		그 곳에 압축해제

	3) 이클립스 (자바수업내용과 겹치지 않게 새로 압축해제해서 사용)
		jsp 작업 폴더 안에 새로 압축해제
		#1. 실행 : workspace 폴더 경로 잡아서 Launch
		#2. 모드 : Java EE (실행하면 default 세팅이라 건들 필요가 없음)
		#3. 인코딩 세팅 : UTF-8
			window > preferences > 검색 : encoding > 
			workspace, css, HTML, jsp = UTF-8

			* 인코딩 : enconding, charset 문자체계
			UTF-8 : 유니코드
			IOS-8859-1
			KSC5607
			MS949 / CP949 : MS사
			EUC-KR : ANSI를 한국에서 확장한 버전
			ANSI : ASCII.

	4) 이클립스에 톰캣 세팅	
		하단에 Servers 탭 > 파란색 링크
				혹은 빈곳에 마우스 우클릭 > new > server
		> Apache 폴더 > Tomcat 9.0 선택 Next
		> Browse 눌러서 톰캣 압축 해제한 경로 선택 Next
		(이 때 눈으로 bin 폴더등이 보일때까지만 들어가기)
		>Finish

		* Servers 탭안에 Tomcat...... 생기고, 
		왼쪽 Project Explorer에 Servers 폴더 생기면 된다.
		크롬 http://localhost:8080/	톰캣 페이지 뜨면 정상
	
	5) 이클립스에 웹프로젝트 생성
		File > new > Dynamic Web Project
		> Project Name : 프로젝트명 작성 Next! > Next!
		> 체크박스 체크하고 Finish!

		JRE System Library [JavaSE 17] : 버전이 우리가 설치한 버전이 아니면, 변경		

	6) 웹 프로젝트의 구조
		웹 서버가 준비된 상태에서 아래와 같은 폴더 구조를 갖춰야 한다.
		
		[폴더명]				: 프로젝트명 (Context path, 루트 컨텍스트)
			-[ WEB-INF ]
				- [ lib ]		: 외부 라이브러리 배치
				- [ classes ]	: 자바 컴파일된 클래스 파일(이클립스에서는 안보임) 
				- web.xml		: 웹 전반적인 설정 파일
			-[ META-INF ]		: 자바 패키징기술인 .jar의 일부, 설정관련
			- jsp/html/css/이미지....	






	공유 폴더 : 윈도우검색창 \\ 192.168.100.74 
	** 공유 폴더 : 본인 폴더에 복사해서 실행하기 **


2. 웹과 JSP
	1) 인터넷 과 웹 
		인터넷 : 컴퓨터가 서로 연결되어 TCP/IP 라는 통신 프로토콜을 이용하여
			정보를 주고 받는 전세계의 컴퓨터 네트워크
		웹 : 인터넷의 서비스 중 하나로, 인터넷에 연결된 컴퓨터를 통해 정보 공유하는 공간.
			world wide web의 줄임말

	2) 웹 동작원리
		클라이언트 / 서버방식으로 동작
		
		클라이언트 : 사용자(요청자), 웹 브라우저
		웹 서버 : 서비스 제공자
	
		동작 방식 : 
			클라이언트 ---- 웹페이지 요청 (request)----> 웹 서버 
			(브라우저) <----결과물로 응답(response----- (ex. tomcat)

	3) 정적 웹 페이지 / 동적 웹 페이지
		정적 웹페이지 : static : 저장된 텍스트 파일 그대로 보는것
					html 같은 웹언어로 작성
					사용자가 web 브라우저에 URL입력 요청
					-> 이미 준비된 문서 그대로 보내줌
					초기 웹 페이지, 변화 적응X, 추가/수정/삭제 수동으로

		동적 웹페이지 : dynamic : 저장된 내용을 가공처리해서 보는것
				PHP, ASP, JSP 같은 웹 언어로 작성
				사용자가 web 브라우저에 URL 입력요청
				-> 분석,처리 -> 가공된 HTML 파일 생성 보내줌
				현재 우리가 보는 페이지 대부분, 데이터 저장 DB,
				
	4) 웹 주소
		URL : http://서버ip:port/File경로
				     -----------
					URI
		
		내가 제공하는 웹사이트를 내가 요청하겠다.
		http://192.168.100.32:8080/파일경로	내IP
		http://127.0.0.1:8080/파일경로 	내PC를 가르키는 IP
		http://localhost:8080/파일경로	(우리가 사용할 버전)

		IP : IP Address 네트워크상 PC 고유 주소
		port : IP 주소로는 컴퓨터 구분을 할 수 있지만, 어떤 서비스 프로그램을
			실행할지 알 수 없어서, 클라이언트가 연결할때 다른 서버 프로그램과
			구분할 수 있도록 port 번호를 사용함.
			내 PC에서 현재 사용중인 port 번호 확인
			 : cmd > netstat -a
			톰캣 기본셋팅 포트번호 : 8080
		도메인
			https://naver.com/main/read.nhn?a=10
			DNS Domain Name Service

			* 브라우저 URL주소 요청
			-> DNS 에 ip주소 요청 -> 응답받은 ip주소로 웹서버에 서비스 요청
			-> 서버가 요청 주소 분석/처리해 요청한 내용을 응답 -> 브라우저

	5) 웹 프로그래밍과 JSP
		웹 프로그래밍 : 웹 서버가 웹 브라우저에 응답으로 전송할 데이터를 
				생성해주는 프로그램을 작성하는 것
		웹 프로그래밍 언어: 클라이언트측 실행 언어와 서버측 실행 언어로 구분.
		JSP (Java Server Pages) : 자바 기반으로 하는 서버측 웹 프로그래밍 언어.
				HTML코드에 자바를 삽입 할 수 있도록 개발된 기술
				(이전에는 Servlet이라는 기술로 사용하였으나 어렵고 불편)
				실제로 웹 어플리케이션 서버에서 서비스 될때는 
				서블릿으로 변환되어 서비스됨.

				- JSP는 서블릿 기술의 확장
				- JSP는 유지관리 용이
				- 빠른 개발 가능

	6) 웹 서버, 웹 컨테이너, 웹 어플리케이션 서버
		
		#1. 웹 서버
			HTTP 프로토콜을 이용하여 클라이언트 요청을 받아
			HTML이나 오브젝트를 전송.
			웹 서버만 구축된 서버는 웹페이지, 이미지등 "정적페이지" 생서
			아파치, IIS 등 서버

		#2. 웹 컨테이너 (JSP기준)
			JSP 와 서블릿을 실행할 수 있는 프로그램으로
			서블릿 컨테이너라고도 함.
			웹서버에서 JSP를 요청하면 컨테이너가 JSP파일을 
			서블릿으로 변환하여 컴파일을 수행, 서블릿 수행 결과를
			웹 서버에 다시 전달.

		#3. 웹 어플리케이션 ( Web Application Server : WAS ) 
			웹서버와 웹 컨테이너를 결합한 서버
			JSP 컨테이너가 탑재된 WAS는 JSP페이지를 컴파일하여
			"동적 페이지" 생성함.
			톰캣, BEA의 웹로직 등......


3. JSP 페이지 구성 요소
	디렉티브 (Directive)
	스크립트 
	표현언어 (EL : Expresstion Language)
	내장객체 (Implicit Object)
	정적인 데이터 (일반 텍스트)
	표준 액션 태그 (Action tag)
	커스텀 태그 (Custom tag)와 표준 태그 라이브러리(JSTL)


4. 디렉티브 태그
	page 		: JSP 페이지에 대한 정보 설정
	include		: JSP 페이지의 특정 영역에 다른 문서를 포함
	taglib		: JSP 페이지에서 사용할 태그 라이브러리 설정
	
	*기본구조
	<%@ 디렉티브태그명 속성명="값" 속성명="값"..... %>

	1) page <%@  %>
		JSP 페이지 설정 정보 지정
		문서 타입, 출력버퍼 크기, 에러페이지 등 지정
		페이지 최 상단에 선언 권장

		[ 속성들 ] 
		language : 사용언어
		contantType : 문서 타입 text/html 텍스트 형식 HTML파일
		pageEncoding : 인코딩
		import : 자바 임포트랑 동일
		sesstion : 서버와의 유지  defaulte = true
		buffer : 버퍼 사이즈 지정 defaulte = 8kb
		autoFlush : 버퍼가 꽉차면 화면에 자동출력
		isThreadSafe : 멀티 스레드 허용, defaulte = true
		info : 페이지 설명글, 메모할것 작성하는 속성
		errorPage : 실행 중 에러 발생시 에러용페이지 지정 ( xml을 통해 지정 )
		isErrorPage : 현재 페이지가 에러페이지 인가 설정 (Exception 클래스 즉시 사용가능)
		isELIgnored : 맵상 공용언어  defaulte = false ( true= 사용하지 않음)
		deferredSystaxAllowedAsliteral : #{내용}형식의 EL을 문자열로 처리할지 여부 설정
				서블릿 2.3 > EL 지원 안함
				서블릿 2.4 > ${내용} 지원
				서블릿 2.5 > ${내용}, #{내용} 지원
					
	2) include 태그
		외부 파일의 내용을 포함 : 복붙 개념. 붙혀와서 서블릿의 한번에 번역.
		헤더, 풋터등 공통된 부분을 별도의 jsp 파일로 만들어 모듈화 할때 유용한 태그
		-> 코드 유지 보수, 재사용 가능성 향상
	
		<%@ include 속성="값".... %>

		file = "파일경로"
		같은 폴더안에 있으면 파일명만, 그렇지 않으면 전체 URL 설정
		주의!!! 현재파일과 include 하는 파일의 인코딩설정이 동일 해야함!!	

	3) taglib 태그
		표현언어, JSTL, 사용자정의 태그 등 외부 태그 라이브러리를 설정하는 태그

		<%@ taglib prefix="태그식별자" uri="태그라이브러리경로" %>

		** 추후 자세히 ....**


5. 주석
	HTML : <!-- 주석 -->
	CSS : /* 주석 */
	JS : // 한줄 주석 	/* 여러줄 주석 */
	Java : // 한줄 주석 	/* 여러줄 주석 */
	JSP : <%-- 여러줄 주석 --%>


6. 스크립트 
	: HTML 코드에 자바코드를 넣어 프로그램이 수행하는 기능 구현
	서블릿 클래스로 변환할때, JSP 컨테이너가 자바 코드가 삽입되어있는
	스크립트 태그를 처리하고 나머지는 HTML코드나 일반 텍스트로 간주함.
		
	선언부		: <%!	%> : 클래스 영역 : 사용 거의 안함.
	스크립트릿	: <%	%> : 메서드 영역 : 가장 많이 사용함. 변수 선언->지역변수  //자바 실행 코드들
	출력문		: <%=	%> : 값을 출력 : HTML코드와 섞어서 사용가능